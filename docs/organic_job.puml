@startuml
!pragma teoz true
skinparam sequenceBoxBorderColor #gray
box Facilitator #ffb
participant Facilitator
end box
box Validator #eef5ff
participant "Facilitator connection"
participant "Job driver"
end box
box Miner #lightyellow
participant "Validator Consumer"
participant "Executor Consumer"
end box
box Executor #efefef
participant Executor
participant "Task/Subprocess"
end box

"Facilitator connection" -> Facilitator: Connect
activate Facilitator
|||
...


-> Facilitator: Create job\n(HTTP)
Facilitator -> "Facilitator connection": ""V2JobRequest""
activate "Facilitator connection"
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Received)

"Facilitator connection" -> "Facilitator connection": Pick miner
"Facilitator connection" -> "Facilitator connection": Submit celery task
activate "Facilitator connection" #lightgreen
rnote right of "Facilitator connection" #lightgreen: celery result timeout
|||
rnote over "Facilitator connection", "Job driver": Waiting for celery task to start
|||
activate "Job driver" #f99
rnote right of "Job driver" #f99: celery task TTL
"Job driver" -> "Validator Consumer": Connect
activate "Validator Consumer"


== =Preparation ==

group Reservation stage
activate "Job driver" #lightgreen
rnote right of "Job driver" #lightgreen: Timeout:\n**reservation time limit**\n(dynamic config)
"Job driver" -> "Validator Consumer": ""V0InitialJobRequest""\n- ""JobStartedReceipt""\n- Executor class\n- Job timing
&note right of "Validator Consumer": This is essentially a dual\nreserve+start executor\nrequest in one
"Validator Consumer" -> "Validator Consumer": Reserve executor from pool
"Validator Consumer" -> "Job driver": ""V0AcceptJobRequest""
&"Job driver" -> Facilitator: ""V0JobStatusUpdate""\n(Accepted)
deactivate "Job driver"
end group

group Spinup stage
activate "Job driver" #lightgreen
rnote right of "Job driver" #lightgreen: Timeout:\n**executor class spinup**\n(depends on class)\n+ **startup time limit**\n(dynamic config)
&"Validator Consumer" --> Executor: Start executor\n(via vendor code)\n(pass executor TTL to deal with zombie executors)
Executor -> Executor: ...
rnote over "Job driver", Executor: Waiting for executor spinup
Executor -> Executor: ...
rnote over "Job driver", Executor: Always-on executors need a couple of seconds here too
Executor -> Executor: ...

activate Executor #f99
rnote right of Executor #f99: executor TTL
end group

group Startup stage
activate Executor #lightgreen
rnote right of "Executor" #lightgreen: Timeout:\n**startup time limit**
&note left of "Executor": Startup time is constant\nunless we want to allow\nheavy volume downloads here

Executor -> "Executor Consumer": Connect
activate "Executor Consumer"
"Executor Consumer" -> Executor: ""V0InitialJobRequest""
Executor -> "Executor": CVE check
Executor -> "Executor": toolkit ver. check
Executor -> Executor: clear old jobs
group docker image in initial details?
note right of Executor: this is only for small images, large job\nimages must be preloaded somewhere else\nor this takes too long
note right of Executor: if image is preloaded, this will exit quickly
Executor -> Executor: pull docker image
end group
Executor -> "Job driver": ""V0ExecutorReadyRequest""
&"Job driver" -> Facilitator: ""V0JobStatusUpdate""\n(Executor ready)
deactivate "Job driver"
deactivate Executor
end group

== =Job execution ==
note over "Job driver", "Executor": It's important for both parties to start the deadline timer right here.\nIn practice, the validator will start its timer a bit later than executor - this is good,\nas the validator is then less likely to time out before the executor. (unless the executor is dead)

activate Executor #aae
rnote right of Executor #aae: Set deadline:\n**leeway**
activate "Job driver" #aae
rnote right of "Job driver" #aae: Set deadline:\n**leeway**
group Download stage
rnote right of "Job driver" #aae: Extend deadline:\n**download time limit**
&rnote right of Executor #aae: Extend deadline:\n**download time limit**

"Job driver" -> "Executor": ""V0JobRequest""\n- Job volumes
Executor -> "Task/Subprocess": ""unpack_volume()""
activate "Task/Subprocess"
note right of "Task/Subprocess": Implementation depends\non volume type
note right of "Task/Subprocess": Multi volume does a loop here
"Task/Subprocess" -> "Task/Subprocess": **Download** + unpack
return done
deactivate "Task/Subprocess"
"Executor" -> "Job driver": V0VolumesReady
&"Job driver" -> Facilitator: ""V0JobStatusUpdate""\n(Volumes ready)
end group


rnote right of "Job driver" #aae: Extend deadline:\n**execution time limit**
&rnote right of Executor #aae: Extend deadline:\n**execution time limit**
group Execution stage

Executor --> "Task/Subprocess": docker run
activate "Task/Subprocess"
"Task/Subprocess" -> "Task/Subprocess": Actual work
"Task/Subprocess" -> Executor: stdout, stderr
deactivate "Task/Subprocess"

"Executor" -> "Job driver": V0ExecutionDone
&"Job driver" -> Facilitator: ""V0JobStatusUpdate""\n(Execution done)
end group

rnote right of "Job driver" #aae: Extend deadline:\n**upload time limit**
&rnote right of Executor #aae: Extend deadline:\n**upload time limit**
group Upload stage

Executor -> Executor: Serialize artifacts
loop ""MultiUploadOutputUploader""
Executor -> Executor: Zip the volume
Executor -> "Task/Subprocess": Start upload
activate "Task/Subprocess"
activate "Task/Subprocess"
activate "Task/Subprocess"
end loop
Executor -> "Task/Subprocess": Upload stdout/stderr
activate "Task/Subprocess"
Executor -> Executor: await upload tasks
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
Executor -> "Job driver": ""V0JobFinished""
deactivate Executor
deactivate "Job driver"

deactivate "Executor Consumer"
deactivate "Validator Consumer"
deactivate "Job driver"
deactivate Executor

rnote over "Facilitator connection": Waiting for celery task result
deactivate "Facilitator connection"
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Complete)
end group

deactivate "Facilitator connection"
|||
@enduml