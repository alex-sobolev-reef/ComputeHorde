# Generated by Django 4.2.19 on 2025-07-26 10:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("validator", "0071_minersplit_metagraphsnapshot_coldkeys_miner_coldkey_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="AllowanceBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_reserved", models.BooleanField()),
                ("is_spent", models.BooleanField()),
                ("reservation_expiry_time", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                ("block_number", models.BigIntegerField(primary_key=True, serialize=False)),
                ("creation_timestamp", models.DateTimeField()),
                (
                    "end_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="The timestamp of the block's end (next blocks creation timestamp). Blocks with field set are considered to have all the allowance calculated",
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MinerAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("hotkey_ss58address", models.TextField(unique=True)),
                ("address", models.TextField()),
                ("port", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Neuron",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("hotkey_ss58address", models.TextField()),
                ("coldkey_ss58address", models.TextField()),
                ("block", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="BlockAllowance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("allowance", models.FloatField()),
                ("miner_ss58", models.TextField()),
                ("validator_ss58", models.TextField()),
                (
                    "executor_class",
                    models.CharField(
                        choices=[
                            ("spin_up-4min.gpu-24gb", "spin_up-4min.gpu-24gb"),
                            ("always_on.gpu-24gb", "always_on.gpu-24gb"),
                            ("always_on.llm.a6000", "always_on.llm.a6000"),
                        ],
                        max_length=255,
                    ),
                ),
                ("invalidated_at_block", models.IntegerField(blank=True, null=True)),
                (
                    "allowance_booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="validator.allowancebooking",
                    ),
                ),
                (
                    "block",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="validator.block"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AllowanceMinerManifest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("miner_ss58address", models.TextField()),
                ("block_number", models.BigIntegerField()),
                (
                    "success",
                    models.BooleanField(
                        help_text="Whether the manifest was successfully retrieved"
                    ),
                ),
                (
                    "executor_class",
                    models.CharField(
                        choices=[
                            ("spin_up-4min.gpu-24gb", "spin_up-4min.gpu-24gb"),
                            ("always_on.gpu-24gb", "always_on.gpu-24gb"),
                            ("always_on.llm.a6000", "always_on.llm.a6000"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "is_drop",
                    models.BooleanField(
                        help_text="Whether the executor count is lower compared to the previously scraped value"
                    ),
                ),
                (
                    "executor_count",
                    models.IntegerField(
                        default=0,
                        help_text="The total number of available executors of this class as reported by the miner",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(fields=["block_number"], name="validator_a_block_n_a048ce_idx"),
                    models.Index(
                        fields=["miner_ss58address", "block_number"],
                        name="validator_a_miner_s_2c497c_idx",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="allowanceminermanifest",
            constraint=models.UniqueConstraint(
                fields=("miner_ss58address", "block_number", "executor_class"),
                name="unique_allowance_miner_manifest",
            ),
        ),
        migrations.AddConstraint(
            model_name="blockallowance",
            constraint=models.UniqueConstraint(
                fields=("block", "miner_ss58", "validator_ss58", "executor_class"),
                name="unique_block_allowance",
            ),
        ),
    ]
